package com.box.androidsdk.share.vm;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.Transformations;

import com.box.androidsdk.content.models.BoxCollaborationItem;
import com.box.androidsdk.content.models.BoxItem;
import com.box.androidsdk.content.models.BoxSharedLink;
import com.box.androidsdk.share.internal.models.BoxFeatures;
import com.box.androidsdk.share.sharerepo.ShareRepo;
import com.box.androidsdk.share.utils.ShareSDKTransformer;

import java.util.Date;
import java.util.HashSet;

import static com.box.androidsdk.content.models.BoxSharedLink.Access.COLLABORATORS;
import static com.box.androidsdk.content.models.BoxSharedLink.Access.COMPANY;
import static com.box.androidsdk.content.models.BoxSharedLink.Access.OPEN;

/**
 * The ViewModel that is responsible for holding/retrieving/modifying data related to shared links
 */
public class SharedLinkVM extends BaseShareVM {

    private final LiveData<PresenterData<BoxItem>> mShareLinkedItem;

    HashSet<BoxSharedLink.Access> mActiveRadioButtons = new HashSet<>();
    private final LiveData<PresenterData<BoxFeatures>> mSupportedFeatures;

    public SharedLinkVM(ShareRepo shareRepo, BoxCollaborationItem shareItem) {
        super(shareRepo, shareItem);
        ShareSDKTransformer transformer = new ShareSDKTransformer();
        mShareLinkedItem = Transformations.map(shareRepo.getShareLinkedItem(),
                response -> transformer.getSharedLinkItemPresenterData(response, getShareItem()));
        mSupportedFeatures = Transformations.map(shareRepo.getSupportFeatures(), transformer::getSupportedFeaturePresenterData);
    }

    /**
     * Create a default shared link for a shared item.
     * @param item the shared item
     */
    public void createDefaultSharedLink(BoxCollaborationItem item) {
        mShareRepo.createDefaultSharedLink(item);
    }

    /**
     * Disable the shared link of a shared item.
     * @param item the shared item
     */
    public void disableSharedLink(BoxCollaborationItem item) {
        mShareRepo.disableSharedLink(item);
    }

    /**
     * Returns a LiveData that holds information about any shared link related operations.
     * @return a LiveData that holds information about any shared link related operations
     */
    public LiveData<PresenterData<BoxItem>> getSharedLinkedItem() {
        return mShareLinkedItem;
    }

    /**
     * Set a new value for currently active buttons.
     * @param activeRadioButtons the new value for currently active buttons.
     */
    public void setActiveRadioButtons(HashSet<BoxSharedLink.Access> activeRadioButtons) {
        this.mActiveRadioButtons = activeRadioButtons;
    }

    /**
     * Returns a set of active Access buttons.
     * @return a set of active Access buttons
     */
    public HashSet<BoxSharedLink.Access> getActiveRadioButtons() {
        return mActiveRadioButtons;
    }

    /**
     * Generates a set of allowed radio buttons for changing access.
     * @return a set of allowed radio buttons for changing access
     */
    public HashSet<BoxSharedLink.Access> generateActiveButtons() { //move to VM in the future
        HashSet<BoxSharedLink.Access> activeRadioButtons = new HashSet<>();
        new HashSet<>(3); //will be generated by ViewModel
        for (BoxSharedLink.Access access : mShareItem.getAllowedSharedLinkAccessLevels()){
            switch (access){
                case OPEN:
                    activeRadioButtons.add(OPEN);
                    break;
                case COMPANY:
                    activeRadioButtons.add(COMPANY);
                    break;
                case COLLABORATORS:
                    activeRadioButtons.add(COLLABORATORS);
                    break;
            }
        }
        return activeRadioButtons;
    }

    /**
     * Make a backend call through share repo to update download permission of an item.
     * @param item the item
     * @param canDownload the new download permission
     * @throws IllegalArgumentException if an invalid item is passed in
     */
    public void changeDownloadPermission(BoxCollaborationItem item, boolean canDownload) throws IllegalArgumentException {
        mShareRepo.changeDownloadPermission(item, canDownload);
    }

    /**
     * Make a backend call through share repo to set a new expiry date for a shared link of an item.
     * @param item the item
     * @param date the new expiry date
     * @throws Exception if the date is invalid
     */
    public void setExpiryDate(BoxCollaborationItem item, Date date) throws Exception {
        mShareRepo.setExpiryDate(item, date);
    }

    public void changeAccessLevel(BoxCollaborationItem item, BoxSharedLink.Access access) {
        mShareRepo.changeAccessLevel(item, access);
    }

    public void changePassword(BoxCollaborationItem item, String password) {
        mShareRepo.changePassword(item, password);
    }

    /**
     * Make a backend call through share repo to remove expiry date for a shared link of an item.
     * @param item the item
     * @throws Exception if the date is invalid (should never happen)
     */
    public void removeExpiryDate(BoxCollaborationItem item) throws Exception{
        mShareRepo.removeExpiryDate(item);
    }

    /**
     * Make a backend call through share repo to fetch supported features for an item.
     * NOTE: This is currently broken.
     */
    public void fetchSupportedFeatures() {
        mShareRepo.fetchSupportedFeatures();
    }

    /**
     * Returns a LiveData that holds supported features for a shared link.
     * @return a LiveData that holds supported features for a shared link
     */
    public LiveData<PresenterData<BoxFeatures>> getSupportedFeatures() {
        return mSupportedFeatures;
    }


}
